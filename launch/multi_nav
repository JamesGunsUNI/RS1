
# from launch import LaunchDescription
# from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription
# from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
# from launch_ros.substitutions import FindPackageShare


# def generate_launch_description():
#     ld = LaunchDescription()

#     config_path = PathJoinSubstitution([FindPackageShare('41068_ignition_bringup'), 'config'])

#     # Command line argument for simulation time
#     use_sim_time_launch_arg = DeclareLaunchArgument(
#         'use_sim_time', default_value='True', description='Flag to enable use_sim_time'
#     )
#     use_sim_time = LaunchConfiguration('use_sim_time')
#     ld.add_action(use_sim_time_launch_arg)

#     ############################################################################
#     # Function to create SLAM + Navigation for a robot namespace
#     def create_robot_nav(robot_name):
#         # SLAM
#         slam = IncludeLaunchDescription(
#             PathJoinSubstitution([FindPackageShare('slam_toolbox'), 'launch', 'online_async_launch.py']),
#             launch_arguments={
#                 'use_sim_time': use_sim_time,
#                 'slam_params_file': PathJoinSubstitution([config_path, f'{robot_name}_slam_params.yaml']),
#                 'namespace': robot_name
#             }.items()
#         )

#         # Navigation
#         navigation = IncludeLaunchDescription(
#             PathJoinSubstitution([FindPackageShare('nav2_bringup'), 'launch', 'navigation_launch.py']),
#             launch_arguments={
#                 'use_sim_time': use_sim_time,
#                 'params_file': PathJoinSubstitution([config_path, f'{robot_name}_nav2_params.yaml']),
#                 'namespace': robot_name
#             }.items()
#         )

#         return [slam, navigation]

#     # Robot1
#     robot1_nodes = create_robot_nav('robot1')
#     for node in robot1_nodes:
#         ld.add_action(node)

#     # #Robot2
#     # robot2_nodes = create_robot_nav('robot2')
#     # for node in robot2_nodes:
#     #     ld.add_action(node)

#     return ld

###############################################################################################################################################################